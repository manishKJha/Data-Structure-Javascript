******can use this link(https://repl.it/languages/javascript)to execute or prefer online eitor which has node*******

class Node{
   constructor(data){
     this.data = data,
     this.next = null
   }
}
class LinkedList{
  constructor(){
    this.head = null
  }
}

let list = new LinkedList();
LinkedList.prototype.insertAtBegnning = function(data){
  let newNode = new Node(data);
  newNode.next = this.head;
  this.head = newNode;
  return this;
}
LinkedList.prototype.insertAtEnd = function(data){
let newNode = new Node(data);
if(this.isEmpty()){
  this.head = newNode;
  }else{
    let temp = this.head;
    while(temp.next != null){
      temp = temp.next;
    }
    temp.next= newNode;
  }
  return this
}

LinkedList.prototype.insertAtPosition = function(data , after){
  let newNode = new Node(data);
  let temp = this.head;
  if(temp == null){
    this.head = newNode;
  }
  else{
    while(temp.data != after){
        temp = temp.next;
    }
      let tmpvar = temp.next;
      temp.next = newNode;
      newNode.next = tmpvar;
  }
  return this;
}

LinkedList.prototype.isEmpty = function(){
  return (this.head == null);
}

LinkedList.prototype.deleteNode = function(data){
  let temp = this.head;
  if(temp.next == null && temp.data == data){
     this.head = temp.next;
  }else{
    while(temp.next.data != data){
           temp = temp.next;
    }
    temp.next = temp.next.next;
  }
  return this;
}

LinkedList.prototype.reverseList = function(){
  let temp = this.head;
  let previous = null;
  let currentNext;
  while(temp != null){
    currentNext = temp.next;
    temp.next = previous;
    previous = temp;
    this.head = temp;
    temp = currentNext;
  }
  return this;
}
LinkedList.prototype.removeDuplicate = function(){
let curHead = this.head;
while(curHead != null){
    let temp = curHead;
    while(temp != null){
       if((temp.next != null) && (curHead.data == temp.next.data)){
         temp.next = temp.next.next;
         temp = temp.next;
       }else{
         temp = temp.next;
       }
    }
    curHead = curHead.next;
  }
return this;
}
LinkedList.prototype.printList = function(){
  if(this.isEmpty()){
    console.log("List Is Empty")
    return false;
  }
  else{
     let temp = this.head;
     while(temp != null){
     process.stdout.write(String(temp.data));
     process.stdout.write(" -> ");
     temp = temp.next;
    }
   console.log(null);
   return true;
  }
}
let lst = new LinkedList();
for(let i=1; i<10; i++){
  lst.insertAtBegnning(i);
}
for(let j=2; j<10; j+=4){
  lst.insertAtEnd(j);
}
lst.printList();
lst.removeDuplicate();
lst.printList();