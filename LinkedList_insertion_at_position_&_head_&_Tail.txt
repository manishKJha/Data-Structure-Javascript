class Node{
   constructor(data){
     this.data = data,
     this.next = null
   }
}
class LinkedList{
  constructor(){
    this.head = null
  }
}

let list = new LinkedList();
LinkedList.prototype.insertAtBegnning = function(data){
  let newNode = new Node(data);
  newNode.next = this.head;
  this.head = newNode;
  return this;
}
LinkedList.prototype.insertAtEnd = function(data){
let newNode = new Node(data);
if(this.isEmpty()){
  this.head = newNode;
  }else{
    let temp = this.head;
    while(temp.next != null){
      temp = temp.next;
    }
    temp.next= newNode;
  }
  return this
}

LinkedList.prototype.insertAtPosition = function(data , after){
  let newNode = new Node(data);
  let temp = this.head;
  if(temp == null){
    this.head = newNode;
  }
  else{
    while(temp.data != after){
        temp = temp.next;
    }
      let tmpvar = temp.next;
      temp.next = newNode;
      newNode.next = tmpvar;
  }
  return this;
}

LinkedList.prototype.isEmpty = function(){
  return (this.head == null)
}

LinkedList.prototype.printList = function(){
  if(this.isEmpty()){
    console.log("List Is Empty")
    return false;
  }
  else{
     let temp = this.head;
     while(temp != null){
     process.stdout.write(String(temp.data));
     process.stdout.write(" -> ");
     temp = temp.next;
    }
   console.log(null);
   return true;
  }
}
let lst = new LinkedList();
lst.insertAtBegnning(5);
lst.insertAtEnd(11);
lst.insertAtPosition(19,5);
lst.printList();